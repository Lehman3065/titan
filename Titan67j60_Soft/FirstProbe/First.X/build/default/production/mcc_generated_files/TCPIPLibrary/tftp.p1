Version 3.2 HI-TECH Software Intermediate Code
[v F666 `(uc ~T0 @X0 0 tf3`ul`*uc`ui ]
"66 mcc_generated_files/TCPIPLibrary/tftp_handler_table.h
[s S33 `ui 1 `*F666 1 ]
[n S33 . storeNumber TFTP_CallBack ]
"66 mcc_generated_files/TCPIPLibrary/tftp.h
[s S32 `ul 1 `uc -> 5 `i `uc -> 32 `i ]
[n S32 . tftp_server_address tftp_block_size tftp_filename ]
"39 C:\Program Files\Microchip\xc8\v1.44\include\string.h
[v _strncpy `(*uc ~T0 @X0 0 ef3`*uc`*Cuc`ui ]
"56
[v _strlen `(ui ~T0 @X0 0 ef1`*Cuc ]
"87 mcc_generated_files/TCPIPLibrary/tftp.c
[c E596 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .. ]
[n E596 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED EAPoL_PACKET_FAILURE INCORRECT_IPV4_HLEN IPV4_NO_OPTIONS TX_QUEUED  ]
"97
[c E634 1 2 3 4 5 6 .. ]
[n E634 . TFTP_READ_REQUEST TFTP_WRITE_REQUEST TFTP_DATA TFTP_ACK TFTP_ERROR TFTP_OPTACK  ]
"81 mcc_generated_files/TCPIPLibrary/udpv4.h
[v _UDP_Start `(E596 ~T0 @X0 0 ef3`ul`ui`ui ]
"120 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Write16 `(v ~T0 @X0 0 ef1`ui ]
"118
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*Cv`ui ]
"119
[v _ETH_Write8 `(v ~T0 @X0 0 ef1`uc ]
"82 mcc_generated_files/TCPIPLibrary/udpv4.h
[v _UDP_Send `(E596 ~T0 @X0 0 ef ]
"195 C:\Program Files\Microchip\xc8\v1.44\include\stdio.h
[v _printf `(i ~T0 @X0 0 ev`*Cuc ]
"59 mcc_generated_files/TCPIPLibrary/udpv4.h
[v _destPort `ui ~T0 @X0 0 e ]
"55 C:\Program Files\Microchip\xc8\v1.44\include\stdlib.h
[v _atoi `(i ~T0 @X0 0 ef1`*Cuc ]
"108 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Read16 `(ui ~T0 @X0 0 ef ]
"156 mcc_generated_files/TCPIPLibrary/tftp.c
[c E626 1 2 3 4 5 6 .. ]
[n E626 . tftp_read tftp_write tftp_data tftp_ack tftp_error tftp_optack  ]
"16 C:\Program Files\Microchip\xc8\v1.44\include\string.h
[v _memset `(*v ~T0 @X0 0 ef3`*v`i`ui ]
"106 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"127 mcc_generated_files/TCPIPLibrary/tftp.h
[v _Process_TFTP_Data `(uc ~T0 @X0 0 ef3`ul`*uc`ui ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 53: extern double atof(const char *);
[; ;stdlib.h: 54: extern double strtod(const char *, const char **);
[; ;stdlib.h: 55: extern int atoi(const char *);
[; ;stdlib.h: 56: extern unsigned xtoi(const char *);
[; ;stdlib.h: 57: extern long atol(const char *);
[; ;stdlib.h: 58: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 60: extern int rand(void);
[; ;stdlib.h: 61: extern void srand(unsigned int);
[; ;stdlib.h: 62: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 63: extern div_t div(int numer, int denom);
[; ;stdlib.h: 64: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 65: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 66: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 67: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 68: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 69: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 70: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 75: extern void * malloc(size_t);
[; ;stdlib.h: 76: extern void free(void *);
[; ;stdlib.h: 77: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 86: extern int atexit(void (*)(void));
[; ;stdlib.h: 87: extern char * getenv(const char *);
[; ;stdlib.h: 88: extern char ** environ;
[; ;stdlib.h: 89: extern int system(char *);
[; ;stdlib.h: 90: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 91: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 92: extern int abs(int);
[; ;stdlib.h: 93: extern long labs(long);
[; ;stdlib.h: 95: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 96: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 101: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 102: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 104: extern char * ftoa(float f, int * status);
[; ;tcpip_types.h: 49: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;tcpip_types.h: 51: typedef union
[; ;tcpip_types.h: 52: {
[; ;tcpip_types.h: 53: uint16_t value;
[; ;tcpip_types.h: 54: struct
[; ;tcpip_types.h: 55: {
[; ;tcpip_types.h: 56: unsigned int priorityCodePoint:3;
[; ;tcpip_types.h: 57: unsigned int dropEligible:1;
[; ;tcpip_types.h: 58: unsigned int vlanId:12;
[; ;tcpip_types.h: 59: };
[; ;tcpip_types.h: 60: } tci_t;
[; ;tcpip_types.h: 62: typedef struct
[; ;tcpip_types.h: 63: {
[; ;tcpip_types.h: 64: uint8_t destinationMAC[6];
[; ;tcpip_types.h: 65: uint8_t sourceMAC[6];
[; ;tcpip_types.h: 66: union
[; ;tcpip_types.h: 67: {
[; ;tcpip_types.h: 68: uint16_t type;
[; ;tcpip_types.h: 69: uint16_t length;
[; ;tcpip_types.h: 70: uint16_t tpid;
[; ;tcpip_types.h: 71: }id;
[; ;tcpip_types.h: 76: } ethernetFrame_t;
"78 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;tcpip_types.h: 78: uint8_t Control_Byte = 0x00;
[; ;tcpip_types.h: 131: typedef struct
[; ;tcpip_types.h: 132: {
[; ;tcpip_types.h: 133: unsigned ihl:4;
[; ;tcpip_types.h: 134: unsigned version:4;
[; ;tcpip_types.h: 135: unsigned ecn:2;
[; ;tcpip_types.h: 136: unsigned dscp:6;
[; ;tcpip_types.h: 137: uint16_t length;
[; ;tcpip_types.h: 138: uint16_t identifcation;
[; ;tcpip_types.h: 139: unsigned fragmentOffsetHigh:5;
[; ;tcpip_types.h: 140: unsigned :1;
[; ;tcpip_types.h: 141: unsigned dontFragment:1;
[; ;tcpip_types.h: 142: unsigned moreFragments:1;
[; ;tcpip_types.h: 143: uint8_t fragmentOffsetLow;
[; ;tcpip_types.h: 144: uint8_t timeToLive;
[; ;tcpip_types.h: 145: uint8_t protocol;
[; ;tcpip_types.h: 146: uint16_t headerCksm;
[; ;tcpip_types.h: 147: uint32_t srcIpAddress;
[; ;tcpip_types.h: 148: uint32_t dstIpAddress;
[; ;tcpip_types.h: 151: } ipv4Header_t;
[; ;tcpip_types.h: 154: typedef struct
[; ;tcpip_types.h: 155: {
[; ;tcpip_types.h: 156: uint32_t srcIpAddress;
[; ;tcpip_types.h: 157: uint32_t dstIpAddress;
[; ;tcpip_types.h: 158: uint8_t protocol;
[; ;tcpip_types.h: 159: uint8_t z;
[; ;tcpip_types.h: 160: uint16_t length;
[; ;tcpip_types.h: 161: } ipv4_pseudo_header_t;
[; ;tcpip_types.h: 163: typedef struct
[; ;tcpip_types.h: 164: {
[; ;tcpip_types.h: 165: union
[; ;tcpip_types.h: 166: {
[; ;tcpip_types.h: 167: uint16_t typeCode;
[; ;tcpip_types.h: 168: struct
[; ;tcpip_types.h: 169: {
[; ;tcpip_types.h: 170: uint8_t code;
[; ;tcpip_types.h: 171: uint8_t type;
[; ;tcpip_types.h: 172: };
[; ;tcpip_types.h: 173: };
[; ;tcpip_types.h: 174: uint16_t checksum;
[; ;tcpip_types.h: 175: } icmpHeader_t;
[; ;tcpip_types.h: 178: typedef struct
[; ;tcpip_types.h: 179: {
[; ;tcpip_types.h: 180: union
[; ;tcpip_types.h: 181: {
[; ;tcpip_types.h: 182: uint16_t typeCode;
[; ;tcpip_types.h: 183: struct
[; ;tcpip_types.h: 184: {
[; ;tcpip_types.h: 185: uint8_t code;
[; ;tcpip_types.h: 186: uint8_t type;
[; ;tcpip_types.h: 187: };
[; ;tcpip_types.h: 188: };
[; ;tcpip_types.h: 189: uint16_t checksum;
[; ;tcpip_types.h: 190: } icmpv6Header_t;
[; ;tcpip_types.h: 193: typedef enum
[; ;tcpip_types.h: 194: {
[; ;tcpip_types.h: 195: ECHO_REPLY = 0x0000,
[; ;tcpip_types.h: 197: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;tcpip_types.h: 198: DEST_HOST_UNREACHABLE = 0x0301,
[; ;tcpip_types.h: 199: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;tcpip_types.h: 200: DEST_PORT_UNREACHABLE = 0x0303,
[; ;tcpip_types.h: 201: FRAGMENTATION_REQUIRED = 0x0304,
[; ;tcpip_types.h: 202: SOURCE_ROUTE_FAILED = 0x0305,
[; ;tcpip_types.h: 203: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;tcpip_types.h: 204: SOURCE_HOST_ISOLATED = 0x0307,
[; ;tcpip_types.h: 205: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;tcpip_types.h: 206: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;tcpip_types.h: 207: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;tcpip_types.h: 208: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;tcpip_types.h: 209: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;tcpip_types.h: 210: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;tcpip_types.h: 211: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;tcpip_types.h: 213: SOURCE_QUENCH = 0x0400,
[; ;tcpip_types.h: 215: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;tcpip_types.h: 216: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;tcpip_types.h: 217: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;tcpip_types.h: 218: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;tcpip_types.h: 220: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;tcpip_types.h: 222: ECHO_REQUEST = 0x0800,
[; ;tcpip_types.h: 225: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_1 = 0x082A,
[; ;tcpip_types.h: 226: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_2 = 0x08FC,
[; ;tcpip_types.h: 228: ROUTER_ADVERTISEMENT = 0x0900,
[; ;tcpip_types.h: 229: ROUTER_SOLICITATION = 0x0A00,
[; ;tcpip_types.h: 230: TRACEROUTE = 0x3000
[; ;tcpip_types.h: 231: } icmpTypeCodes_t;
[; ;tcpip_types.h: 233: typedef struct
[; ;tcpip_types.h: 234: {
[; ;tcpip_types.h: 235: uint16_t srcPort;
[; ;tcpip_types.h: 236: uint16_t dstPort;
[; ;tcpip_types.h: 237: uint16_t length;
[; ;tcpip_types.h: 238: uint16_t checksum;
[; ;tcpip_types.h: 239: } udpHeader_t;
[; ;tcpip_types.h: 241: typedef struct
[; ;tcpip_types.h: 242: {
[; ;tcpip_types.h: 243: uint16_t sourcePort;
[; ;tcpip_types.h: 244: uint16_t destPort;
[; ;tcpip_types.h: 245: uint32_t sequenceNumber;
[; ;tcpip_types.h: 246: uint32_t ackNumber;
[; ;tcpip_types.h: 247: union{
[; ;tcpip_types.h: 248: uint8_t byte13;
[; ;tcpip_types.h: 249: struct{
[; ;tcpip_types.h: 250: uint8_t ns:1;
[; ;tcpip_types.h: 251: uint8_t reserved:3;
[; ;tcpip_types.h: 252: uint8_t dataOffset:4;
[; ;tcpip_types.h: 253: };
[; ;tcpip_types.h: 254: };
[; ;tcpip_types.h: 256: union{
[; ;tcpip_types.h: 257: uint8_t flags;
[; ;tcpip_types.h: 258: struct{
[; ;tcpip_types.h: 259: uint8_t fin:1;
[; ;tcpip_types.h: 260: uint8_t syn:1;
[; ;tcpip_types.h: 261: uint8_t rst:1;
[; ;tcpip_types.h: 262: uint8_t psh:1;
[; ;tcpip_types.h: 263: uint8_t ack:1;
[; ;tcpip_types.h: 264: uint8_t urg:1;
[; ;tcpip_types.h: 265: uint8_t ece:1;
[; ;tcpip_types.h: 266: uint8_t cwr:1;
[; ;tcpip_types.h: 267: };
[; ;tcpip_types.h: 268: };
[; ;tcpip_types.h: 270: uint16_t windowSize;
[; ;tcpip_types.h: 271: uint16_t checksum;
[; ;tcpip_types.h: 272: uint16_t urgentPtr;
[; ;tcpip_types.h: 276: } tcpHeader_t;
[; ;tcpip_types.h: 278: typedef struct
[; ;tcpip_types.h: 279: {
[; ;tcpip_types.h: 280: uint16_t version:4;
[; ;tcpip_types.h: 281: uint16_t trafficClass:8;
[; ;tcpip_types.h: 282: uint16_t flowLabel1stNibble:4;
[; ;tcpip_types.h: 284: uint16_t flowLabelRest;
[; ;tcpip_types.h: 285: uint16_t payloadLength;
[; ;tcpip_types.h: 286: uint8_t nextHeader;
[; ;tcpip_types.h: 287: uint8_t hopLimit;
[; ;tcpip_types.h: 288: uint8_t srcAddress[16];
[; ;tcpip_types.h: 289: uint8_t dstAddress[16];
[; ;tcpip_types.h: 291: } ipv6Header_t;
[; ;tcpip_types.h: 294: typedef enum
[; ;tcpip_types.h: 295: {
[; ;tcpip_types.h: 296: HOPOPT_TCPIP = 0,
[; ;tcpip_types.h: 297: ICMP_TCPIP = 1,
[; ;tcpip_types.h: 298: IGMP_TCPIP = 2,
[; ;tcpip_types.h: 299: GGP_TCPIP = 3,
[; ;tcpip_types.h: 300: IPV4_TCPIP = 4,
[; ;tcpip_types.h: 301: ST_TCPIP = 5,
[; ;tcpip_types.h: 302: TCP_TCPIP = 6,
[; ;tcpip_types.h: 303: CBT_TCPIP = 7,
[; ;tcpip_types.h: 304: EGP_TCPIP = 8,
[; ;tcpip_types.h: 305: IGP_TCPIP = 9,
[; ;tcpip_types.h: 306: BBN_RCC_MON_TCPIP = 10,
[; ;tcpip_types.h: 307: NVP_II_TCPIP = 11,
[; ;tcpip_types.h: 308: PUP_TCPIP = 12,
[; ;tcpip_types.h: 309: ARGUS_TCPIP = 13,
[; ;tcpip_types.h: 310: EMCON_TCPIP = 14,
[; ;tcpip_types.h: 311: XNET_TCPIP = 15,
[; ;tcpip_types.h: 312: CHAOS_TCPIP = 16,
[; ;tcpip_types.h: 313: UDP_TCPIP = 17,
[; ;tcpip_types.h: 314: MUX_TCPIP = 18,
[; ;tcpip_types.h: 315: DCN_MEAS_TCPIP = 19,
[; ;tcpip_types.h: 316: HMP_TCPIP = 20,
[; ;tcpip_types.h: 317: PRM_TCPIP = 21,
[; ;tcpip_types.h: 318: XNS_IDP_TCPIP = 22,
[; ;tcpip_types.h: 319: TRUNK_1_TCPIP = 23,
[; ;tcpip_types.h: 320: TRUNK_2_TCPIP = 24,
[; ;tcpip_types.h: 321: LEAF_1_TCPIP = 25,
[; ;tcpip_types.h: 322: LEAF_2_TCPIP = 26,
[; ;tcpip_types.h: 323: RDP_TCPIP = 27,
[; ;tcpip_types.h: 324: IRTP_TCPIP = 28,
[; ;tcpip_types.h: 325: ISO_TP4_TCPIP = 29,
[; ;tcpip_types.h: 326: NETBLT_TCPIP = 30,
[; ;tcpip_types.h: 327: MFE_NSP_TCPIP = 31,
[; ;tcpip_types.h: 328: MERIT_INP_TCPIP = 32,
[; ;tcpip_types.h: 329: DCCP_TCPIP = 33,
[; ;tcpip_types.h: 330: THREEPC_TCPIP = 34,
[; ;tcpip_types.h: 331: IDPR_TCPIP = 35,
[; ;tcpip_types.h: 332: XTP_TCPIP = 36,
[; ;tcpip_types.h: 333: DDP_TCPIP = 37,
[; ;tcpip_types.h: 334: IDPR_CMTP_TCPIP = 38,
[; ;tcpip_types.h: 335: TPpp_TCPIP = 39,
[; ;tcpip_types.h: 336: IL_TCPIP = 40,
[; ;tcpip_types.h: 337: IPV6_TUNNEL_TCPIP = 41,
[; ;tcpip_types.h: 338: SDRP_TCPIP = 42,
[; ;tcpip_types.h: 339: IPV6_Route_TCPIP = 43,
[; ;tcpip_types.h: 340: IPV6_Frag_TCPIP = 44,
[; ;tcpip_types.h: 341: IDRP_TCPIP = 45,
[; ;tcpip_types.h: 342: RSVP_TCPIP = 46,
[; ;tcpip_types.h: 343: GRE_TCPIP = 47,
[; ;tcpip_types.h: 344: DSR_TCPIP = 48,
[; ;tcpip_types.h: 345: BNA_TCPIP = 49,
[; ;tcpip_types.h: 346: ESP_TCPIP = 50,
[; ;tcpip_types.h: 347: AH_TCPIP = 51,
[; ;tcpip_types.h: 348: I_NLSP_TCPIP = 52,
[; ;tcpip_types.h: 349: SWIPE_TCPIP = 53,
[; ;tcpip_types.h: 350: NARP_TCPIP = 54,
[; ;tcpip_types.h: 351: MOBILE_TCPIP = 55,
[; ;tcpip_types.h: 352: TLSP_TCPIP = 56,
[; ;tcpip_types.h: 353: SKIP_TCPIP = 57,
[; ;tcpip_types.h: 354: IPV6_ICMP_TCPIP = 58,
[; ;tcpip_types.h: 355: IPV6_NoNxt_TCPIP = 59,
[; ;tcpip_types.h: 356: IPV6_Opts_TCPIP = 60,
[; ;tcpip_types.h: 357: CFTP_TCPIP = 62,
[; ;tcpip_types.h: 358: SAT_EXPAK_TCPIP = 64,
[; ;tcpip_types.h: 359: KRYPTOLAN_TCPIP = 65,
[; ;tcpip_types.h: 360: RVD_TCPIP = 66,
[; ;tcpip_types.h: 361: IPPC_TCPIP = 67,
[; ;tcpip_types.h: 362: SAT_MON_TCPIP = 69,
[; ;tcpip_types.h: 363: VISA_TCPIP = 70,
[; ;tcpip_types.h: 364: IPCV_TCPIP = 71,
[; ;tcpip_types.h: 365: CPNX_TCPIP = 72,
[; ;tcpip_types.h: 366: CPHB_TCPIP = 73,
[; ;tcpip_types.h: 367: WSN_TCPIP = 74,
[; ;tcpip_types.h: 368: PVP_TCPIP = 75,
[; ;tcpip_types.h: 369: BR_SAT_MON_TCPIP = 76,
[; ;tcpip_types.h: 370: SUN_ND_TCPIP = 77,
[; ;tcpip_types.h: 371: WB_MON_TCPIP = 78,
[; ;tcpip_types.h: 372: WB_EXPAK_TCPIP = 79,
[; ;tcpip_types.h: 373: ISO_IP_TCPIP = 80,
[; ;tcpip_types.h: 374: VMTP_TCPIP = 81,
[; ;tcpip_types.h: 375: SECURE_VMTP_TCPIP = 82,
[; ;tcpip_types.h: 376: VINES_TCPIP = 83,
[; ;tcpip_types.h: 377: TTP_TCPIP = 84,
[; ;tcpip_types.h: 378: IPTM_TCPIP = 84,
[; ;tcpip_types.h: 379: NSFNET_IGP_TCPIP = 85,
[; ;tcpip_types.h: 380: DGP_TCPIP = 86,
[; ;tcpip_types.h: 381: TCF_TCPIP = 87,
[; ;tcpip_types.h: 382: EIGRP_TCPIP = 88,
[; ;tcpip_types.h: 383: OSPFIGP_TCPIP = 89,
[; ;tcpip_types.h: 384: Sprite_RPC_TCPIP = 90,
[; ;tcpip_types.h: 385: LARP_TCPIP = 91,
[; ;tcpip_types.h: 386: MTP_TCPIP = 92,
[; ;tcpip_types.h: 387: AX25_TCPIP = 93,
[; ;tcpip_types.h: 388: IPIP_TCPIP = 94,
[; ;tcpip_types.h: 389: MICP_TCPIP = 95,
[; ;tcpip_types.h: 390: SCC_SP_TCPIP = 96,
[; ;tcpip_types.h: 391: ETHERIP_TCPIP = 97,
[; ;tcpip_types.h: 392: ENCAP_TCPIP = 98,
[; ;tcpip_types.h: 393: GMTP_TCPIP = 100,
[; ;tcpip_types.h: 394: IFMP_TCPIP = 101,
[; ;tcpip_types.h: 395: PNNI_TCPIP = 102,
[; ;tcpip_types.h: 396: PIM_TCPIP = 103,
[; ;tcpip_types.h: 397: ARIS_TCPIP = 104,
[; ;tcpip_types.h: 398: SCPS_TCPIP = 105,
[; ;tcpip_types.h: 399: QNX_TCPIP = 106,
[; ;tcpip_types.h: 400: A_N_TCPIP = 107,
[; ;tcpip_types.h: 401: IPComp_TCPIP = 108,
[; ;tcpip_types.h: 402: SNP_TCPIP = 109,
[; ;tcpip_types.h: 403: Compaq_Peer_TCPIP = 110,
[; ;tcpip_types.h: 404: IPX_in_IP_TCPIP = 111,
[; ;tcpip_types.h: 405: VRRP_TCPIP = 112,
[; ;tcpip_types.h: 406: PGM_TCPIP = 113,
[; ;tcpip_types.h: 407: L2TP_TCPIP = 115,
[; ;tcpip_types.h: 408: DDX_TCPIP = 116,
[; ;tcpip_types.h: 409: IATP_TCPIP = 117,
[; ;tcpip_types.h: 410: STP_TCPIP = 118,
[; ;tcpip_types.h: 411: SRP_TCPIP = 119,
[; ;tcpip_types.h: 412: UTI_TCPIP = 120,
[; ;tcpip_types.h: 413: SMP_TCPIP = 121,
[; ;tcpip_types.h: 414: SM_TCPIP = 122,
[; ;tcpip_types.h: 415: PTP_TCPIP = 123,
[; ;tcpip_types.h: 416: ISIS_TCPIP = 124,
[; ;tcpip_types.h: 417: FIRE_TCPIP = 125,
[; ;tcpip_types.h: 418: CRTP_TCPIP = 126,
[; ;tcpip_types.h: 419: CRUDP_TCPIP = 127,
[; ;tcpip_types.h: 420: SSCOPMCE_TCPIP = 128,
[; ;tcpip_types.h: 421: IPLT_TCPIP = 129,
[; ;tcpip_types.h: 422: SPS_TCPIP = 130,
[; ;tcpip_types.h: 423: PIPE_TCPIP = 131,
[; ;tcpip_types.h: 424: SCTP_TCPIP = 132,
[; ;tcpip_types.h: 425: FC_TCPIP = 133
[; ;tcpip_types.h: 426: } ipProtocolNumbers;
[; ;tcpip_types.h: 428: typedef struct
[; ;tcpip_types.h: 429: {
[; ;tcpip_types.h: 430: union{
[; ;tcpip_types.h: 431: uint32_t s_addr;
[; ;tcpip_types.h: 432: uint8_t s_addr_byte[4];
[; ;tcpip_types.h: 433: };
[; ;tcpip_types.h: 434: }inAddr_t;
[; ;tcpip_types.h: 436: typedef struct
[; ;tcpip_types.h: 437: {
[; ;tcpip_types.h: 438: union {
[; ;tcpip_types.h: 439: uint8_t s6_u8[16];
[; ;tcpip_types.h: 440: uint16_t s6_u16[8];
[; ;tcpip_types.h: 441: uint32_t s6_u32[4];
[; ;tcpip_types.h: 442: } s6;
[; ;tcpip_types.h: 446: }in6Addr_t;
[; ;tcpip_types.h: 448: typedef struct
[; ;tcpip_types.h: 449: {
[; ;tcpip_types.h: 450: uint16_t port;
[; ;tcpip_types.h: 451: inAddr_t addr;
[; ;tcpip_types.h: 452: }sockaddr_in_t;
[; ;tcpip_types.h: 454: typedef struct {
[; ;tcpip_types.h: 456: uint16_t in6_port;
[; ;tcpip_types.h: 457: uint32_t in6_flowinfo;
[; ;tcpip_types.h: 458: in6Addr_t in6_addr;
[; ;tcpip_types.h: 459: uint32_t in6_scope_id;
[; ;tcpip_types.h: 460: }sockaddr_in6_t;
[; ;tcpip_types.h: 462: extern const char *network_errors[];
[; ;tcpip_types.h: 464: typedef enum
[; ;tcpip_types.h: 465: {
[; ;tcpip_types.h: 466: ERROR =0,
[; ;tcpip_types.h: 467: SUCCESS,
[; ;tcpip_types.h: 468: LINK_NOT_FOUND,
[; ;tcpip_types.h: 469: BUFFER_BUSY,
[; ;tcpip_types.h: 470: TX_LOGIC_NOT_IDLE,
[; ;tcpip_types.h: 471: MAC_NOT_FOUND,
[; ;tcpip_types.h: 472: IP_WRONG_VERSION,
[; ;tcpip_types.h: 473: IPV4_CHECKSUM_FAILS,
[; ;tcpip_types.h: 474: DEST_IP_NOT_MATCHED,
[; ;tcpip_types.h: 475: ICMP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 476: UDP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 477: TCP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 478: DMA_TIMEOUT,
[; ;tcpip_types.h: 479: PORT_NOT_AVAILABLE,
[; ;tcpip_types.h: 480: ARP_IP_NOT_MATCHED,
[; ;tcpip_types.h: 481: EAPoL_PACKET_FAILURE,
[; ;tcpip_types.h: 482: INCORRECT_IPV4_HLEN,
[; ;tcpip_types.h: 483: IPV4_NO_OPTIONS,
[; ;tcpip_types.h: 484: TX_QUEUED
[; ;tcpip_types.h: 485: }error_msg;
[; ;tcpip_types.h: 487: typedef struct
[; ;tcpip_types.h: 488: {
[; ;tcpip_types.h: 489: inAddr_t dest_addr;
[; ;tcpip_types.h: 490: }destIP_t;
[; ;tcpip_types.h: 493: typedef int8_t socklistsize_t;
[; ;tcpip_types.h: 495: typedef void (*ip_receive_function_ptr)(int);
"58 mcc_generated_files/TCPIPLibrary/tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 84 `c
-> 105 `c
-> 116 `c
-> 97 `c
-> 110 `c
-> 32 `c
-> 66 `c
-> 111 `c
-> 105 `c
-> 108 `c
-> 101 `c
-> 114 `c
-> 0 `c
..
]
[; ;tcpip_config.h: 58: const char dhcpName[] = "Titan Boiler";
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;tftp.h: 45: typedef enum
[; ;tftp.h: 46: {
[; ;tftp.h: 47: tftp_read = 1,
[; ;tftp.h: 48: tftp_write,
[; ;tftp.h: 49: tftp_data,
[; ;tftp.h: 50: tftp_ack,
[; ;tftp.h: 51: tftp_error,
[; ;tftp.h: 52: tftp_optack
[; ;tftp.h: 53: }tftp_client_state;
[; ;tftp.h: 55: typedef enum
[; ;tftp.h: 56: {
[; ;tftp.h: 57: TFTP_READ_REQUEST=0x0001,
[; ;tftp.h: 58: TFTP_WRITE_REQUEST,
[; ;tftp.h: 59: TFTP_DATA,
[; ;tftp.h: 60: TFTP_ACK,
[; ;tftp.h: 61: TFTP_ERROR,
[; ;tftp.h: 62: TFTP_OPTACK
[; ;tftp.h: 63: }tftp_opcode;
[; ;tftp.h: 65: typedef struct
[; ;tftp.h: 66: {
[; ;tftp.h: 67: uint32_t tftp_server_address;
[; ;tftp.h: 68: char tftp_block_size[5];
[; ;tftp.h: 69: char tftp_filename[32];
[; ;tftp.h: 70: }tftp_t;
[; ;tftp.h: 71: extern tftp_t tftp_msg;
[; ;tftp.h: 72: extern uint32_t tftp_last_address;
[; ;tftp.h: 73: extern volatile bool last_block;
[; ;tftp.h: 85: void TFTP_Ack(uint8_t opcode);
[; ;tftp.h: 97: error_msg TFTP_Read_Write_Request(uint8_t opcode);
[; ;tftp.h: 109: void TFTP_Handler(int length);
[; ;tftp.h: 127: uint8_t Process_TFTP_Data(uint32_t address, char *data, uint16_t length);
[; ;tftp.h: 145: void TFTP_Configure(uint32_t tftp_server_address, char *tftp_filename, char *tftp_block_size);
"58 mcc_generated_files/TCPIPLibrary/tftp_handler_table.h
[v _store_type `ui ~T0 @X0 1 e ]
[i _store_type
-> -> 0 `i `ui
]
[; ;tftp_handler_table.h: 58: uint16_t store_type = 0;
[; ;tftp_handler_table.h: 63: typedef uint8_t (*TFTP_receive_function_ptr)(uint32_t , char *, uint16_t);
[; ;tftp_handler_table.h: 65: typedef struct
[; ;tftp_handler_table.h: 66: {
[; ;tftp_handler_table.h: 67: uint16_t storeNumber;
[; ;tftp_handler_table.h: 68: TFTP_receive_function_ptr TFTP_CallBack;
[; ;tftp_handler_table.h: 69: } store_handler_t;
"71
[v _TFTP_callBackTable `CS33 ~T0 @X0 -> 0 `x e ]
[i _TFTP_callBackTable
:U ..
..
]
[; ;tftp_handler_table.h: 71: const store_handler_t TFTP_callBackTable[] =
[; ;tftp_handler_table.h: 72: {
[; ;tftp_handler_table.h: 73: };
[; ;mac_address.h: 51: typedef union
[; ;mac_address.h: 52: {
[; ;mac_address.h: 53: uint8_t mac_array[6];
[; ;mac_address.h: 54: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;mac_address.h: 55: } mac48Address_t;
[; ;mac_address.h: 57: extern const mac48Address_t broadcastMAC;
[; ;mac_address.h: 58: extern const mac48Address_t macAddress;
[; ;mac_address.h: 59: extern mac48Address_t hostMacAddress;
[; ;mac_address.h: 61: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_driver.h: 49: typedef struct
[; ;ethernet_driver.h: 50: {
[; ;ethernet_driver.h: 51: uint16_t byteCount;
[; ;ethernet_driver.h: 52: unsigned long_drop_event:1;
[; ;ethernet_driver.h: 53: unsigned :1;
[; ;ethernet_driver.h: 54: unsigned excessCarrierEvent:1;
[; ;ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_driver.h: 56: unsigned crcError:1;
[; ;ethernet_driver.h: 57: unsigned lengthCheckError:1;
[; ;ethernet_driver.h: 58: unsigned lengthLongError:1;
[; ;ethernet_driver.h: 59: unsigned rxOK:1;
[; ;ethernet_driver.h: 60: unsigned rxMulticast:1;
[; ;ethernet_driver.h: 61: unsigned rxBroadcast:1;
[; ;ethernet_driver.h: 62: unsigned dribbleNibble:1;
[; ;ethernet_driver.h: 63: unsigned controlFrame:1;
[; ;ethernet_driver.h: 64: unsigned pauseControlFrame:1;
[; ;ethernet_driver.h: 65: unsigned unknownContrlFrame:1;
[; ;ethernet_driver.h: 66: unsigned vlanTagPresent:1;
[; ;ethernet_driver.h: 67: unsigned zero:1;
[; ;ethernet_driver.h: 68: }receiveStatusVector_t;
[; ;ethernet_driver.h: 70: typedef struct
[; ;ethernet_driver.h: 71: {
[; ;ethernet_driver.h: 72: unsigned error:1;
[; ;ethernet_driver.h: 73: unsigned pktReady:1;
[; ;ethernet_driver.h: 74: unsigned up:1;
[; ;ethernet_driver.h: 75: unsigned idle:1;
[; ;ethernet_driver.h: 76: unsigned linkChange:1;
[; ;ethernet_driver.h: 77: unsigned bufferBusy:1;
[; ;ethernet_driver.h: 78: unsigned :3;
[; ;ethernet_driver.h: 79: uint16_t saveRDPT;
[; ;ethernet_driver.h: 80: uint16_t saveWRPT;
[; ;ethernet_driver.h: 81: } ethernetDriver_t;
[; ;ethernet_driver.h: 83: typedef struct
[; ;ethernet_driver.h: 84: {
[; ;ethernet_driver.h: 85: uint16_t flags;
[; ;ethernet_driver.h: 86: uint16_t packetStart;
[; ;ethernet_driver.h: 87: uint16_t packetEnd;
[; ;ethernet_driver.h: 89: void *prevPacket;
[; ;ethernet_driver.h: 90: void *nextPacket;
[; ;ethernet_driver.h: 91: } txPacket_t;
[; ;ethernet_driver.h: 93: extern volatile ethernetDriver_t ethData;
[; ;ethernet_driver.h: 99: void ETH_Init(void);
[; ;ethernet_driver.h: 100: void ETH_EventHandler(void);
[; ;ethernet_driver.h: 101: void ETH_NextPacketUpdate();
[; ;ethernet_driver.h: 102: void ETH_ResetReceiver(void);
[; ;ethernet_driver.h: 103: void ETH_SendSystemReset(void);
[; ;ethernet_driver.h: 106: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_driver.h: 107: uint8_t ETH_Read8(void);
[; ;ethernet_driver.h: 108: uint16_t ETH_Read16(void);
[; ;ethernet_driver.h: 109: uint32_t ETH_Read24(void);
[; ;ethernet_driver.h: 110: uint32_t ETH_Read32(void);
[; ;ethernet_driver.h: 111: void ETH_Dump(uint16_t);
[; ;ethernet_driver.h: 112: void ETH_Flush(void);
[; ;ethernet_driver.h: 114: uint16_t ETH_GetFreeTxBufferSize(void);
[; ;ethernet_driver.h: 116: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_driver.h: 117: uint16_t ETH_WriteString(const char *string);
[; ;ethernet_driver.h: 118: uint16_t ETH_WriteBlock(const void *, uint16_t);
[; ;ethernet_driver.h: 119: void ETH_Write8(uint8_t);
[; ;ethernet_driver.h: 120: void ETH_Write16(uint16_t);
[; ;ethernet_driver.h: 121: void ETH_Write24(uint32_t data);
[; ;ethernet_driver.h: 122: void ETH_Write32(uint32_t);
[; ;ethernet_driver.h: 123: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_driver.h: 124: error_msg ETH_Copy(uint16_t);
[; ;ethernet_driver.h: 125: error_msg ETH_Send(void);
[; ;ethernet_driver.h: 127: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 128: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 130: void ETH_GetMAC(uint8_t *);
[; ;ethernet_driver.h: 131: void ETH_SetMAC(uint8_t *);
[; ;ethernet_driver.h: 132: uint16_t ETH_GetWritePtr();
[; ;ethernet_driver.h: 133: void ETH_SaveRDPT(void);
[; ;ethernet_driver.h: 134: void ETH_ResetReadPtr();
[; ;ethernet_driver.h: 135: uint16_t ETH_GetReadPtr(void);
[; ;ethernet_driver.h: 136: void ETH_SetReadPtr(uint16_t);
[; ;ethernet_driver.h: 137: uint16_t ETH_GetStatusVectorByteCount(void);
[; ;ethernet_driver.h: 138: void ETH_SetStatusVectorByteCount(uint16_t);
[; ;ethernet_driver.h: 140: void ETH_ResetByteCount(void);
[; ;ethernet_driver.h: 141: uint16_t ETH_GetByteCount(void);
[; ;ethernet_driver.h: 143: uint16_t ETH_ReadSavedWRPT(void);
[; ;ethernet_driver.h: 144: void ETH_SaveWRPT(void);
[; ;ethernet_driver.h: 145: void ETH_SetRxByteCount(uint16_t count);
[; ;ethernet_driver.h: 146: uint16_t ETH_GetRxByteCount();
[; ;ethernet_driver.h: 148: bool ETH_CheckLinkUp();
[; ;ethernet_driver.h: 150: void ETH_TxReset(void);
[; ;ethernet_driver.h: 151: void ETH_MoveBackReadPtr(uint16_t offset);
[; ;udpv4.h: 59: extern uint16_t destPort;
[; ;udpv4.h: 60: extern udpHeader_t udpHeader;
[; ;udpv4.h: 61: extern ipv4Header_t ipv4Header;
[; ;udpv4.h: 81: error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort);
[; ;udpv4.h: 82: error_msg UDP_Send();
[; ;udpv4.h: 83: error_msg UDP_Receive(uint16_t udpcksm);
[; ;udpv4.h: 84: void udp_test(int len);
"62 mcc_generated_files/TCPIPLibrary/tftp.c
[v _tftp_modes `*Cuc ~T0 @X0 -> 0 `x e ]
[i _tftp_modes
:U ..
:s 1C
:s 2C
:s 3C
..
]
[; ;tftp.c: 62: const char *tftp_modes[] = {"netascii", "octet", "mail"};
"63
[v _tftp_option `Cuc ~T0 @X0 -> 0 `x e ]
[i _tftp_option
:U ..
-> 98 `c
-> 108 `c
-> 107 `c
-> 115 `c
-> 105 `c
-> 122 `c
-> 101 `c
-> 0 `c
..
]
[; ;tftp.c: 63: const char tftp_option[] = "blksize";
"65
[v _tftp_msg `S32 ~T0 @X0 1 e ]
[; ;tftp.c: 65: tftp_t tftp_msg;
"66
[v _last_block `Vuc ~T0 @X0 1 e ]
[i _last_block
-> -> 0 `i `uc
]
[; ;tftp.c: 66: volatile bool last_block = 0;
"68
[v _current_block `ui ~T0 @X0 1 s ]
[i _current_block
-> -> 0 `i `ui
]
[v _prev_block `ui ~T0 @X0 1 s ]
[i _prev_block
-> -> 0 `i `ui
]
[v _next_block `ui ~T0 @X0 1 s ]
[i _next_block
-> -> 0 `i `ui
]
[; ;tftp.c: 68: static uint16_t current_block = 0x0000, prev_block = 0x0000, next_block = 0x0000;
"69
[v _tftp_last_address `ul ~T0 @X0 1 e ]
[i _tftp_last_address
-> -> 131072 `l `ul
]
[; ;tftp.c: 69: uint32_t tftp_last_address = 0x00020000;
"70
[v _flash_address `ul ~T0 @X0 1 s ]
[i _flash_address
-> -> -> 0 `i `l `ul
]
[; ;tftp.c: 70: static uint32_t flash_address = 0x00000000;
"71
[v _checksum_eeprm `ui ~T0 @X0 1 e ]
[i _checksum_eeprm
-> -> 0 `i `ui
]
[; ;tftp.c: 71: uint16_t checksum_eeprm=0;
"72
[v _flash_checksum_current `ui ~T0 @X0 1 e ]
[i _flash_checksum_current
-> -> 0 `i `ui
]
[; ;tftp.c: 72: uint16_t flash_checksum_current = 0;
"73
[v _flash_checksum_new `ui ~T0 @X0 1 e ]
[i _flash_checksum_new
-> -> 0 `i `ui
]
[; ;tftp.c: 73: uint16_t flash_checksum_new = 0 ;
"77
[v _TFTP_Configure `(v ~T0 @X0 1 ef3`ul`*uc`*uc ]
"78
{
[; ;tftp.c: 77: void TFTP_Configure(uint32_t tftp_server_address, char *tftp_filename, char *tftp_block_size)
[; ;tftp.c: 78: {
[e :U _TFTP_Configure ]
"77
[v _tftp_server_address `ul ~T0 @X0 1 r1 ]
[v _tftp_filename `*uc ~T0 @X0 1 r2 ]
[v _tftp_block_size `*uc ~T0 @X0 1 r3 ]
"78
[f ]
[; ;tftp.c: 79: tftp_msg.tftp_server_address = tftp_server_address;
"79
[e = . _tftp_msg 0 _tftp_server_address ]
[; ;tftp.c: 80: strncpy(tftp_msg.tftp_filename,tftp_filename,strlen(tftp_filename));
"80
[e ( _strncpy (3 , , &U . _tftp_msg 2 -> _tftp_filename `*Cuc ( _strlen (1 -> _tftp_filename `*Cuc ]
[; ;tftp.c: 81: strncpy(tftp_msg.tftp_block_size,tftp_block_size,strlen(tftp_block_size));
"81
[e ( _strncpy (3 , , &U . _tftp_msg 1 -> _tftp_block_size `*Cuc ( _strlen (1 -> _tftp_block_size `*Cuc ]
[; ;tftp.c: 82: }
"82
[e :UE 39 ]
}
"86
[v _TFTP_Read_Write_Request `(E596 ~T0 @X0 1 ef1`uc ]
"87
{
[; ;tftp.c: 86: error_msg TFTP_Read_Write_Request(uint8_t opcode)
[; ;tftp.c: 87: {
[e :U _TFTP_Read_Write_Request ]
"86
[v _opcode `uc ~T0 @X0 1 r1 ]
"87
[f ]
"88
[v _len_tftp_fn `uc ~T0 @X0 1 a ]
[v _len_tftp_mode `uc ~T0 @X0 1 a ]
[v _len_tftp_option `uc ~T0 @X0 1 a ]
[v _len_tftp_block_size `uc ~T0 @X0 1 a ]
"89
[v _started `E596 ~T0 @X0 1 a ]
[; ;tftp.c: 88: uint8_t len_tftp_fn, len_tftp_mode, len_tftp_option, len_tftp_block_size;
[; ;tftp.c: 89: error_msg started = ERROR;
[e = _started . `E596 0 ]
"90
[v _tftp_server_address `ul ~T0 @X0 1 a ]
[; ;tftp.c: 90: uint32_t tftp_server_address = tftp_msg.tftp_server_address;
[e = _tftp_server_address . _tftp_msg 0 ]
[; ;tftp.c: 92: len_tftp_fn = strlen(tftp_msg.tftp_filename);
"92
[e = _len_tftp_fn -> ( _strlen (1 -> &U . _tftp_msg 2 `*Cuc `uc ]
[; ;tftp.c: 93: len_tftp_mode = strlen(tftp_modes[1]);
"93
[e = _len_tftp_mode -> ( _strlen (1 *U + &U _tftp_modes * -> -> -> 1 `i `ui `ux -> -> # *U &U _tftp_modes `ui `ux `uc ]
[; ;tftp.c: 94: len_tftp_option = strlen(tftp_option);
"94
[e = _len_tftp_option -> ( _strlen (1 &U _tftp_option `uc ]
[; ;tftp.c: 95: len_tftp_block_size = strlen(tftp_msg.tftp_block_size);
"95
[e = _len_tftp_block_size -> ( _strlen (1 -> &U . _tftp_msg 1 `*Cuc `uc ]
[; ;tftp.c: 97: if(opcode == ((tftp_opcode)TFTP_READ_REQUEST || opcode == (tftp_opcode)TFTP_WRITE_REQUEST))
"97
[e $ ! == -> _opcode `i -> || != -> . `E634 0 `i -> -> -> 0 `i `E634 `i == -> _opcode `i -> . `E634 1 `i `i 41  ]
[; ;tftp.c: 98: {
"98
{
[; ;tftp.c: 99: started = UDP_Start(tftp_server_address,65531,69);
"99
[e = _started ( _UDP_Start (3 , , _tftp_server_address -> -> 65531 `l `ui -> -> 69 `i `ui ]
[; ;tftp.c: 101: if(started)
"101
[e $ ! != -> _started `i -> -> -> 0 `i `E596 `i 42  ]
[; ;tftp.c: 102: {
"102
{
[; ;tftp.c: 103: ETH_Write16(opcode);
"103
[e ( _ETH_Write16 (1 -> _opcode `ui ]
[; ;tftp.c: 104: ETH_WriteBlock((char *)tftp_msg.tftp_filename,len_tftp_fn);
"104
[e ( _ETH_WriteBlock (2 , -> &U . _tftp_msg 2 `*Cv -> _len_tftp_fn `ui ]
[; ;tftp.c: 105: ETH_Write8(0x00);
"105
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
[; ;tftp.c: 106: ETH_WriteBlock((char *)tftp_modes[1],len_tftp_mode);
"106
[e ( _ETH_WriteBlock (2 , -> -> *U + &U _tftp_modes * -> -> -> 1 `i `ui `ux -> -> # *U &U _tftp_modes `ui `ux `*uc `*Cv -> _len_tftp_mode `ui ]
[; ;tftp.c: 107: ETH_Write8(0x00);
"107
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
[; ;tftp.c: 108: ETH_WriteBlock((char *)tftp_option,len_tftp_option);
"108
[e ( _ETH_WriteBlock (2 , -> -> &U _tftp_option `*uc `*Cv -> _len_tftp_option `ui ]
[; ;tftp.c: 109: ETH_Write8(0x00);
"109
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
[; ;tftp.c: 110: ETH_WriteBlock((char *)tftp_msg.tftp_block_size,len_tftp_block_size);
"110
[e ( _ETH_WriteBlock (2 , -> &U . _tftp_msg 1 `*Cv -> _len_tftp_block_size `ui ]
[; ;tftp.c: 111: ETH_Write8(0x00);
"111
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
[; ;tftp.c: 113: UDP_Send();
"113
[e ( _UDP_Send ..  ]
"114
}
[; ;tftp.c: 114: }
[e $U 43  ]
"115
[e :U 42 ]
[; ;tftp.c: 115: else printf("UDP_Start Failed\r\n");
[e ( _printf :s 4C ]
[e :U 43 ]
"116
}
[; ;tftp.c: 116: }
[e $U 44  ]
"117
[e :U 41 ]
[; ;tftp.c: 117: else printf("Failed Opcode = %d \r\n",opcode);
[e ( _printf , (. :s 5C -> _opcode `i ]
[e :U 44 ]
[; ;tftp.c: 119: return started;
"119
[e ) _started ]
[e $UE 40  ]
[; ;tftp.c: 120: }
"120
[e :UE 40 ]
}
"123
[v _TFTP_Ack `(v ~T0 @X0 1 ef1`uc ]
"124
{
[; ;tftp.c: 123: void TFTP_Ack(uint8_t opcode)
[; ;tftp.c: 124: {
[e :U _TFTP_Ack ]
"123
[v _opcode `uc ~T0 @X0 1 r1 ]
"124
[f ]
"125
[v _started `uc ~T0 @X0 1 a ]
[; ;tftp.c: 125: bool started = 0;
[e = _started -> -> 0 `i `uc ]
"126
[v _dest_port `ui ~T0 @X0 1 a ]
"127
[v _tftp_server_address `ul ~T0 @X0 1 a ]
[; ;tftp.c: 126: uint16_t dest_port;
[; ;tftp.c: 127: uint32_t tftp_server_address = tftp_msg.tftp_server_address;
[e = _tftp_server_address . _tftp_msg 0 ]
[; ;tftp.c: 129: if(opcode == TFTP_ACK)
"129
[e $ ! == -> _opcode `i -> . `E634 3 `i 46  ]
[; ;tftp.c: 130: {
"130
{
[; ;tftp.c: 131: dest_port = (destPort);
"131
[e = _dest_port _destPort ]
[; ;tftp.c: 132: started = UDP_Start(tftp_server_address,65531,dest_port);
"132
[e = _started -> ( _UDP_Start (3 , , _tftp_server_address -> -> 65531 `l `ui _dest_port `uc ]
[; ;tftp.c: 133: if(started)
"133
[e $ ! != -> _started `i -> -> -> 0 `i `uc `i 47  ]
[; ;tftp.c: 134: {
"134
{
[; ;tftp.c: 135: ETH_Write16(opcode);
"135
[e ( _ETH_Write16 (1 -> _opcode `ui ]
[; ;tftp.c: 136: ETH_Write16(current_block);
"136
[e ( _ETH_Write16 (1 _current_block ]
[; ;tftp.c: 138: UDP_Send();
"138
[e ( _UDP_Send ..  ]
"139
}
[e :U 47 ]
"140
}
[e :U 46 ]
[; ;tftp.c: 139: }
[; ;tftp.c: 140: }
[; ;tftp.c: 141: }
"141
[e :UE 45 ]
}
"143
[v _TFTP_Handler `(v ~T0 @X0 1 ef1`i ]
"144
{
[; ;tftp.c: 143: void TFTP_Handler(int length)
[; ;tftp.c: 144: {
[e :U _TFTP_Handler ]
"143
[v _length `i ~T0 @X0 1 r1 ]
"144
[f ]
"145
[v _opcode `uc ~T0 @X0 1 a ]
"146
[v _data `uc ~T0 @X0 -> 100 `i a ]
"147
[v _recv_buffer `uc ~T0 @X0 -> 100 `i a ]
"148
[v _block_size `ui ~T0 @X0 1 a ]
"149
[v _v `i ~T0 @X0 1 a ]
[; ;tftp.c: 145: uint8_t opcode;
[; ;tftp.c: 146: char data[100];
[; ;tftp.c: 147: char recv_buffer[100];
[; ;tftp.c: 148: uint16_t block_size;
[; ;tftp.c: 149: int v;
[; ;tftp.c: 151: block_size = atoi(tftp_msg.tftp_block_size);
"151
[e = _block_size -> ( _atoi (1 -> &U . _tftp_msg 1 `*Cuc `ui ]
[; ;tftp.c: 152: if(length > (2 + 2))
"152
[e $ ! > _length + -> 2 `i -> 2 `i 49  ]
[; ;tftp.c: 153: {
"153
{
[; ;tftp.c: 154: opcode = ETH_Read16();
"154
[e = _opcode -> ( _ETH_Read16 ..  `uc ]
[; ;tftp.c: 155: current_block = ETH_Read16();
"155
[e = _current_block ( _ETH_Read16 ..  ]
[; ;tftp.c: 156: if(opcode == tftp_optack)
"156
[e $ ! == -> _opcode `i -> . `E626 5 `i 50  ]
[; ;tftp.c: 157: {
"157
{
[; ;tftp.c: 158: current_block = 0;
"158
[e = _current_block -> -> 0 `i `ui ]
[; ;tftp.c: 159: TFTP_Ack(TFTP_ACK);
"159
[e ( _TFTP_Ack (1 -> . `E634 3 `uc ]
"160
}
[e :U 50 ]
[; ;tftp.c: 160: }
[; ;tftp.c: 161: if(current_block == prev_block+1)
"161
[e $ ! == _current_block + _prev_block -> -> 1 `i `ui 51  ]
[; ;tftp.c: 162: {
"162
{
[; ;tftp.c: 163: next_block = current_block + 1;
"163
[e = _next_block + _current_block -> -> 1 `i `ui ]
[; ;tftp.c: 164: length = length - 4;
"164
[e = _length - _length -> 4 `i ]
[; ;tftp.c: 165: if((length <block_size) && (opcode == TFTP_DATA))
"165
[e $ ! && < -> _length `ui _block_size == -> _opcode `i -> . `E634 2 `i 52  ]
[; ;tftp.c: 166: {
"166
{
[; ;tftp.c: 167: last_block = 1;
"167
[e = _last_block -> -> 1 `i `uc ]
"168
}
[e :U 52 ]
[; ;tftp.c: 168: }
[; ;tftp.c: 169: switch(opcode)
"169
[e $U 54  ]
[; ;tftp.c: 170: {
"170
{
[; ;tftp.c: 171: case tftp_read:
"171
[e :U 55 ]
[; ;tftp.c: 172: break;
"172
[e $U 53  ]
[; ;tftp.c: 173: case tftp_write:
"173
[e :U 56 ]
[; ;tftp.c: 174: current_block = 0;
"174
[e = _current_block -> -> 0 `i `ui ]
[; ;tftp.c: 175: TFTP_Ack(TFTP_ACK);
"175
[e ( _TFTP_Ack (1 -> . `E634 3 `uc ]
[; ;tftp.c: 176: break;
"176
[e $U 53  ]
[; ;tftp.c: 177: case tftp_data:
"177
[e :U 57 ]
[; ;tftp.c: 179: while(length > 0)
"179
[e $U 58  ]
[e :U 59 ]
[; ;tftp.c: 180: {
"180
{
[; ;tftp.c: 181: v = (length>100)?100:length;
"181
[e = _v ? > _length -> 100 `i : -> 100 `i _length ]
[; ;tftp.c: 182: memset(data,0,sizeof(data));
"182
[e ( _memset (3 , , -> &U _data `*v -> 0 `i -> # _data `ui ]
[; ;tftp.c: 183: memset(recv_buffer,0,sizeof(recv_buffer));
"183
[e ( _memset (3 , , -> &U _recv_buffer `*v -> 0 `i -> # _recv_buffer `ui ]
[; ;tftp.c: 184: ETH_ReadBlock(data,v);
"184
[e ( _ETH_ReadBlock (2 , -> &U _data `*v -> _v `ui ]
[; ;tftp.c: 185: Process_TFTP_Data(tftp_last_address, data, v);
"185
[e ( _Process_TFTP_Data (3 , , _tftp_last_address &U _data -> _v `ui ]
[; ;tftp.c: 186: tftp_last_address = tftp_last_address + v;
"186
[e = _tftp_last_address + _tftp_last_address -> -> _v `l `ul ]
[; ;tftp.c: 187: length -= v;
"187
[e =- _length _v ]
"188
}
[e :U 58 ]
"179
[e $ > _length -> 0 `i 59  ]
[e :U 60 ]
[; ;tftp.c: 188: }
[; ;tftp.c: 189: TFTP_Ack(TFTP_ACK);
"189
[e ( _TFTP_Ack (1 -> . `E634 3 `uc ]
[; ;tftp.c: 190: prev_block = current_block;
"190
[e = _prev_block _current_block ]
[; ;tftp.c: 191: break;
"191
[e $U 53  ]
[; ;tftp.c: 192: case tftp_ack:
"192
[e :U 61 ]
[; ;tftp.c: 193: break;
"193
[e $U 53  ]
[; ;tftp.c: 194: case tftp_error:
"194
[e :U 62 ]
[; ;tftp.c: 195: length = 0;
"195
[e = _length -> 0 `i ]
[; ;tftp.c: 196: break;
"196
[e $U 53  ]
"198
}
[; ;tftp.c: 198: }
[e $U 53  ]
"169
[e :U 54 ]
[e [\ _opcode , $ -> . `E626 0 `uc 55
 , $ -> . `E626 1 `uc 56
 , $ -> . `E626 2 `uc 57
 , $ -> . `E626 3 `uc 61
 , $ -> . `E626 4 `uc 62
 53 ]
"198
[e :U 53 ]
"199
}
[; ;tftp.c: 199: }
[e $U 63  ]
"200
[e :U 51 ]
[; ;tftp.c: 200: else if(current_block < prev_block)
[e $ ! < _current_block _prev_block 64  ]
[; ;tftp.c: 201: {
"201
{
[; ;tftp.c: 202: TFTP_Ack(TFTP_ACK);
"202
[e ( _TFTP_Ack (1 -> . `E634 3 `uc ]
[; ;tftp.c: 203: length=0;
"203
[e = _length -> 0 `i ]
"205
}
[; ;tftp.c: 205: }
[e $U 65  ]
"206
[e :U 64 ]
[; ;tftp.c: 206: else if(current_block > prev_block+1)
[e $ ! > _current_block + _prev_block -> -> 1 `i `ui 66  ]
[; ;tftp.c: 207: {
"207
{
[; ;tftp.c: 208: length=0;
"208
[e = _length -> 0 `i ]
"209
}
[e :U 66 ]
"210
[e :U 65 ]
[e :U 63 ]
}
[e :U 49 ]
[; ;tftp.c: 209: }
[; ;tftp.c: 210: }
[; ;tftp.c: 211: }
"211
[e :UE 48 ]
}
"228
[v _Process_TFTP_Data `(uc ~T0 @X0 1 ef3`ul`*uc`ui ]
"229
{
[; ;tftp.c: 228: uint8_t Process_TFTP_Data(uint32_t address, char *data, uint16_t length)
[; ;tftp.c: 229: {
[e :U _Process_TFTP_Data ]
"228
[v _address `ul ~T0 @X0 1 r1 ]
[v _data `*uc ~T0 @X0 1 r2 ]
[v _length `ui ~T0 @X0 1 r3 ]
"229
[f ]
"230
[v _hptr `*CS33 ~T0 @X0 1 a ]
[; ;tftp.c: 230: const store_handler_t *hptr;
[; ;tftp.c: 232: hptr = TFTP_callBackTable;
"232
[e = _hptr &U _TFTP_callBackTable ]
[; ;tftp.c: 233: for(uint8_t i=0; i<(sizeof(TFTP_callBackTable)/sizeof(*TFTP_callBackTable)); i++)
"233
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `ui / -> # _TFTP_callBackTable `ui -> # *U &U _TFTP_callBackTable `ui 68  ]
[e $U 69  ]
"234
[e :U 68 ]
[; ;tftp.c: 234: {
{
[; ;tftp.c: 235: if(hptr)
"235
[e $ ! != _hptr -> -> 0 `i `*CS33 71  ]
[; ;tftp.c: 236: {
"236
{
[; ;tftp.c: 237: if(hptr->storeNumber == store_type)
"237
[e $ ! == . *U _hptr 0 _store_type 72  ]
[; ;tftp.c: 238: {
"238
{
[; ;tftp.c: 239: hptr->TFTP_CallBack(address, data, length);
"239
[e ( *U . *U _hptr 1 (3 , , _address _data _length ]
[; ;tftp.c: 240: break;
"240
[e $U 69  ]
"241
}
[e :U 72 ]
"242
}
[e :U 71 ]
[; ;tftp.c: 241: }
[; ;tftp.c: 242: }
[; ;tftp.c: 243: hptr++;
"243
[e ++ _hptr * -> -> 1 `i `x -> -> # *U _hptr `i `x ]
"244
}
"233
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `ui / -> # _TFTP_callBackTable `ui -> # *U &U _TFTP_callBackTable `ui 68  ]
[e :U 69 ]
"244
}
[; ;tftp.c: 244: }
[; ;tftp.c: 246: return 1;
"246
[e ) -> -> 1 `i `uc ]
[e $UE 67  ]
[; ;tftp.c: 247: }
"247
[e :UE 67 ]
}
[p f _printf 8388736 ]
[a 2C 111 99 116 101 116 0 ]
[a 3C 109 97 105 108 0 ]
[a 1C 110 101 116 97 115 99 105 105 0 ]
[a 4C 85 68 80 95 83 116 97 114 116 32 70 97 105 108 101 100 13 10 0 ]
[a 5C 70 97 105 108 101 100 32 79 112 99 111 100 101 32 61 32 37 100 32 13 10 0 ]
