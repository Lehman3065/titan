
TitanNonSafety.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  0000006a  000000de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f7  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c0  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f2  00000000  00000000  000002fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000144  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002f  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000005c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	17 c0       	rjmp	.+46     	; 0x34 <__vector_2>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 27       	eor	r17, r17
  24:	1f bf       	out	0x3f, r17	; 63
  26:	cf eb       	ldi	r28, 0xBF	; 191
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	12 d0       	rcall	.+36     	; 0x54 <main>
  30:	1a c0       	rjmp	.+52     	; 0x66 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <__vector_2>:

void InitArg(void);
void InitHardware(void);

ISR(PCINT0_vect)
{
  34:	1f 93       	push	r17
  36:	0f 93       	push	r16
  38:	0f b7       	in	r16, 0x3f	; 63
  3a:	0f 93       	push	r16
  3c:	10 e0       	ldi	r17, 0x00	; 0
	ClearBitInReg(PORTA, PORTA0);
  3e:	10 98       	cbi	0x02, 0	; 2
}
  40:	0f 91       	pop	r16
  42:	0f bf       	out	0x3f, r16	; 63
  44:	0f 91       	pop	r16
  46:	1f 91       	pop	r17
  48:	18 95       	reti

0000004a <InitArg>:
//	return 0;
}

void InitArg(void)
{
	PORTB &= ~(1<<PORTB1);
  4a:	31 98       	cbi	0x06, 1	; 6
	RSTFLR &= ~(1 << PORF);
  4c:	4b b7       	in	r20, 0x3b	; 59
  4e:	4e 7f       	andi	r20, 0xFE	; 254
  50:	4b bf       	out	0x3b, r20	; 59
  52:	08 95       	ret

00000054 <main>:
	ClearBitInReg(PORTA, PORTA0);
}

int main(void)
{
	cli();
  54:	f8 94       	cli
	if (RSTFLR & (1 << PORF)) InitArg();
  56:	0b b7       	in	r16, 0x3b	; 59
  58:	00 fd       	sbrc	r16, 0
  5a:	f7 df       	rcall	.-18     	; 0x4a <InitArg>
	RSTFLR &= ~(1 << PORF);
}

void InitHardware(void)
{
	sei();
  5c:	78 94       	sei
	cli();
	if (RSTFLR & (1 << PORF)) InitArg();
	InitHardware();
    while(1)
    {
		PORTA |= (1<<PORTA0|1<<PORTA2);
  5e:	42 b1       	in	r20, 0x02	; 2
  60:	45 60       	ori	r20, 0x05	; 5
  62:	42 b9       	out	0x02, r20	; 2
  64:	fc cf       	rjmp	.-8      	; 0x5e <main+0xa>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
